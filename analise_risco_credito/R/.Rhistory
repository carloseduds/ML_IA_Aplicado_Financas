# Carregando o dataset em um dataframe
credit.df <- read.csv("../data/raw/credit_dataset.csv", header = TRUE, sep = ",")
head(credit.df)
## Convertendo as variáveis para o tipo fator (categórica)
to.factors <- function(df, variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])
}
return(df)
}
## Normalização
scale.features <- function(df, variables){
for (variable in variables){
df[[variable]] <- scale(df[[variable]], center=T, scale=T)
}
return(df)
}
# Normalizando as variáveis
numeric.vars <- c("credit.duration.months", "age", "credit.amount")
credit.df <- scale.features(credit.df, numeric.vars)
# Variáveis do tipo fator
categorical.vars <- c('credit.rating', 'account.balance', 'previous.credit.payment.status',
'credit.purpose', 'savings', 'employment.duration', 'installment.rate',
'marital.status', 'guarantor', 'residence.duration', 'current.assets',
'other.credits', 'apartment.type', 'bank.credits', 'occupation',
'dependents', 'telephone', 'foreign.worker')
credit.df <- to.factors(df = credit.df, variables = categorical.vars)
# Dividindo os dados em treino e teste - 60:40 ratio
indexes <- sample(1:nrow(credit.df), size = 0.6 * nrow(credit.df))
train.data <- credit.df[indexes,]
test.data <- credit.df[-indexes,]
# Função para seleção de variáveis
run.feature.selection <- function(num.iters=20, feature.vars, class.var){
set.seed(10)
variable.sizes <- 1:10
control <- rfeControl(functions = rfFuncs, method = "cv",
verbose = FALSE, returnResamp = "all",
number = num.iters)
results.rfe <- rfe(x = feature.vars, y = class.var,
sizes = variable.sizes,
rfeControl = control)
return(results.rfe)
}
# Executando a função
rfe.results <- run.feature.selection(feature.vars = train.data[,-1],
class.var = train.data[,1])
#Carregando as bibliotecas
library(caret)
library(randomForest)
library(ROCR)
# Executando a função
rfe.results <- run.feature.selection(feature.vars = train.data[,-1],
class.var = train.data[,1])
# Visualizando os resultados
rfe.results
varImp((rfe.results))
# Biblioteca de utilitários para construção de gráficos
source("plot_utils.R")
# Biblioteca de utilitários para construção de gráficos
## separate feature and class variables
test.feature.vars <- test.data[,-1]
test.class.var <- test.data[,1]
# Construindo um modelo de regressão logística
formula.init <- "credit.rating ~ ."
formula.init <- as.formula(formula.init)
lr.model <- glm(formula = formula.init, data = train.data, family = "binomial")
# Visualizando o modelo
summary(lr.model)
# Testando o modelo nos dados de teste
lr.predictions <- predict(lr.model, test.data, type="response")
lr.predictions <- round(lr.predictions)
# Avaliando o modelo
confusionMatrix(table(data = lr.predictions, reference = test.class.var), positive = '1')
## Feature selection
formula <- "credit.rating ~ ."
formula <- as.formula(formula)
control <- trainControl(method = "repeatedcv", number = 10, repeats = 2)
model <- train(formula, data = train.data, method = "glm", trControl = control)
importance <- varImp(model, scale = FALSE)
plot(importance)
savePlot("dados.jpeg", type="jpeg")
jpeg(filename = "Algumnome.jpg")
jpeg(filename = "Rplotaula.jpg", width = 480, height = 480,
units = "px", pointsize = 12, quality = 100,
bg = "white",  res = NA, restoreConsole = TRUE)
plot(importance)
dev.off()
jpeg(filename = "Rplotaula.jpg", width = 720, height = 480,
units = "px", pointsize = 12, quality = 100,
bg = "white",  res = NA, restoreConsole = TRUE)
plot(importance)
dev.off()
jpeg(filename = "Rplotaula.jpg", width = 720, height = 480,
units = "px", pointsize = 12, quality = 200,
bg = "white",  res = NA, restoreConsole = TRUE)
plot(importance)
dev.off()
jpeg(filename = "Rplotaula.jpg", width = 720, height = 480,
units = "px", pointsize = 12, quality = 700,
bg = "white",  res = NA, restoreConsole = TRUE)
plot(importance)
dev.off()
jpeg(filename = "Rplotaula.jpg", width = 720, height = 480,
units = "px", pointsize = 12, quality = 1700,
bg = "white",  res = NA, restoreConsole = TRUE)
plot(importance)
dev.off()
jpeg(filename = "Rplotaula.jpg", width = 720, height = 480,
units = "px", pointsize = 12, quality = 100,
bg = "white",  res = NA, restoreConsole = TRUE)
plot(importance)
dev.off()
jpeg(filename = "Rplotaula.jpg", width = 720, height = 580,
units = "px", pointsize = 12, quality = 100,
bg = "white",  res = NA, restoreConsole = TRUE)
plot(importance)
dev.off()
# Construindo o modelo com as variáveis selecionadas
formula.new <- "credit.rating ~ account.balance + credit.purpose + previous.credit.payment.status + savings + credit.duration.months"
formula.new <- as.formula(formula.new)
lr.model.new <- glm(formula = formula.new, data = train.data, family = "binomial")
# Visualizando o modelo
summary(lr.model.new)
# Testando o modelo nos dados de teste
lr.predictions.new <- predict(lr.model.new, test.data, type = "response")
lr.predictions.new <- round(lr.predictions.new)
# Avaliando o modelo
confusionMatrix(table(data = lr.predictions.new, reference = test.class.var), positive = '1')
# Criando curvas ROC
lr.model.best <- lr.model
lr.prediction.values <- predict(lr.model.best, test.feature.vars, type = "response")
predictions <- prediction(lr.prediction.values, test.class.var)
par(mfrow = c(1,2))
plot.roc.curve(predictions, title.text = "Curva ROC")
library(ROCR)
plot.roc.curve <- function(predictions, title.text){
perf <- performance(predictions, "tpr", "fpr")
plot(perf, col = "black", lty = 1, lwd = 2,
main = title.text, cex.main = 0.6,
cex.lab = 0.8, xaxs="i", yaxs="i")
abline(0,1, col = "red")
auc <- performance(predictions, "auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4, legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
}
plot.pr.curve <- function(predictions, title.text){
perf <- performance(predictions, "prec", "rec")
plot(perf, col = "black", lty = 1, lwd = 2,
main = title.text, cex.main = 0.6, cex.lab = 0.8, xaxs = "i", yaxs = "i")
}
plot.roc.curve(predictions, title.text = "Curva ROC")
plot.pr.curve(predictions, title.text = "Curva Precision/Recall")
jpeg(filename = "Curva_ROC.jpg", width = 720, height = 570,
units = "px", pointsize = 12, quality = 100,
bg = "white",  res = NA, restoreConsole = TRUE)
plot.roc.curve(predictions, title.text = "Curva ROC")
dev.off()
#Curva Roc
png(filename = "Curva_ROC.jpg", width = 720, height = 570,
units = "px", pointsize = 12, quality = 100,
bg = "white",  res = NA, restoreConsole = TRUE)
#Curva Roc
png(filename = "Curva_ROC.png", width = 720, height = 570,
units = "px", pointsize = 12, quality = 100,
bg = "white",  res = NA, restoreConsole = TRUE)
#Curva Roc
png(filename = "Curva_ROC.png", width = 720, height = 570,
units = "px", pointsize = 12,
bg = "white",  res = NA, restoreConsole = TRUE)
plot.roc.curve(predictions, title.text = "Curva ROC")
dev.off()
#Curva Roc
png(filename = "Curva_ROC.png", width = 720, height = 570,
units = "px", pointsize = 12, res=148,
bg = "white",  res = NA, restoreConsole = TRUE)
#Curva Roc
png(filename = "Curva_ROC.png", width = 720, height = 570,
units = "px", pointsize = 12, res=258,
bg = "white",  res = NA, restoreConsole = TRUE)
source("../figs/plot_utils.R")
jpeg(filename = "Curva_ROC.jpg", width = 720, height = 570,
units = "px", pointsize = 12, quality = 100,
bg = "white",  res = NA, restoreConsole = TRUE)
plot.roc.curve(predictions, title.text = "Curva ROC")
dev.off()
#Curva Precision
jpeg(filename = "Curva_Precision_Recall.jpg", width = 720, height = 570,
units = "px", pointsize = 12, quality = 100,
bg = "white",  res = NA, restoreConsole = TRUE)
plot.pr.curve(predictions, title.text = "Curva Precision/Recall")
dev.off()
#Carregando as bibliotecas
library(caret)
library(randomForest)
library(ROCR)
source("../figs/plot_utils.R")
# Carregando o dataset em um dataframe
credit.df <- read.csv("../data/raw/credit_dataset.csv", header = TRUE, sep = ",")
## Convertendo as variáveis para o tipo fator (categórica)
to.factors <- function(df, variables){
for (variable in variables){
df[[variable]] <- as.factor(df[[variable]])
}
return(df)
}
## Normalização
scale.features <- function(df, variables){
for (variable in variables){
df[[variable]] <- scale(df[[variable]], center=T, scale=T)
}
return(df)
}
# Normalizando as variáveis
numeric.vars <- c("credit.duration.months", "age", "credit.amount")
credit.df <- scale.features(credit.df, numeric.vars)
# Variáveis do tipo fator
categorical.vars <- c('credit.rating', 'account.balance', 'previous.credit.payment.status',
'credit.purpose', 'savings', 'employment.duration', 'installment.rate',
'marital.status', 'guarantor', 'residence.duration', 'current.assets',
'other.credits', 'apartment.type', 'bank.credits', 'occupation',
'dependents', 'telephone', 'foreign.worker')
credit.df <- to.factors(df = credit.df, variables = categorical.vars)
# Dividindo os dados em treino e teste - 60:40 ratio
indexes <- sample(1:nrow(credit.df), size = 0.6 * nrow(credit.df))
train.data <- credit.df[indexes,]
test.data <- credit.df[-indexes,]
# Função para seleção de variáveis
run.feature.selection <- function(num.iters=20, feature.vars, class.var){
set.seed(10)
variable.sizes <- 1:10
control <- rfeControl(functions = rfFuncs, method = "cv",
verbose = FALSE, returnResamp = "all",
number = num.iters)
results.rfe <- rfe(x = feature.vars, y = class.var,
sizes = variable.sizes,
rfeControl = control)
return(results.rfe)
}
# Executando a função
rfe.results <- run.feature.selection(feature.vars = train.data[,-1],
class.var = train.data[,1])
# Visualizando os resultados
rfe.results
varImp((rfe.results))
# Biblioteca de utilitários para construção de gráficos
## separate feature and class variables
test.feature.vars <- test.data[,-1]
test.class.var <- test.data[,1]
# Construindo um modelo de regressão logística
formula.init <- "credit.rating ~ ."
formula.init <- as.formula(formula.init)
lr.model <- glm(formula = formula.init, data = train.data, family = "binomial")
# Visualizando o modelo
summary(lr.model)
# Testando o modelo nos dados de teste
lr.predictions <- predict(lr.model, test.data, type="response")
lr.predictions <- round(lr.predictions)
# Avaliando o modelo
confusionMatrix(table(data = lr.predictions, reference = test.class.var), positive = '1')
## Feature selection
formula <- "credit.rating ~ ."
formula <- as.formula(formula)
control <- trainControl(method = "repeatedcv", number = 10, repeats = 2)
model <- train(formula, data = train.data, method = "glm", trControl = control)
importance <- varImp(model, scale = FALSE)
jpeg(filename = "../reports/figures/importancia_atributos.jpg", width = 720, height = 570,
units = "px", pointsize = 12, quality = 100,
bg = "white",  res = NA, restoreConsole = TRUE)
plot(importance)
dev.off()
# Construindo o modelo com as variáveis selecionadas
formula.new <- "credit.rating ~ account.balance + credit.purpose + previous.credit.payment.status + savings + credit.duration.months"
formula.new <- as.formula(formula.new)
lr.model.new <- glm(formula = formula.new, data = train.data, family = "binomial")
# Visualizando o modelo
summary(lr.model.new)
# Testando o modelo nos dados de teste
lr.predictions.new <- predict(lr.model.new, test.data, type = "response")
lr.predictions.new <- round(lr.predictions.new)
# Avaliando o modelo
confusionMatrix(table(data = lr.predictions.new, reference = test.class.var), positive = '1')
# Criando curvas ROC
lr.model.best <- lr.model
lr.prediction.values <- predict(lr.model.best, test.feature.vars, type = "response")
predictions <- prediction(lr.prediction.values, test.class.var)
par(mfrow = c(1,2))
jpeg(filename = "../reports/figures/Curva_ROC.jpg", width = 720, height = 570,
units = "px", pointsize = 12, quality = 100,
bg = "white",  res = NA, restoreConsole = TRUE)
plot.roc.curve(predictions, title.text = "Curva ROC")
dev.off()
#Curva Precision
jpeg(filename = "../reports/figures/Curva_Precision_Recall.jpg", width = 720, height = 570,
units = "px", pointsize = 12, quality = 100,
bg = "white",  res = NA, restoreConsole = TRUE)
plot.pr.curve(predictions, title.text = "Curva Precision/Recall")
dev.off()
jpeg(filename = "../reports/figures/Curva_ROC.jpg", width = 720, height = 570,
units = "px", pointsize = 12, quality = 100,
bg = "white",  res = NA, restoreConsole = TRUE)
plot.roc.curve(predictions, title.text = "Curva ROC")
dev.off()
source("../figs/plot_utils.R")
jpeg(filename = "../reports/figures/Curva_ROC.jpg", width = 720, height = 570,
units = "px", pointsize = 12, quality = 100,
bg = "white",  res = NA, restoreConsole = TRUE)
plot.roc.curve(predictions, title.text = "Curva ROC")
dev.off()
